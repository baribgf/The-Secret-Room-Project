const fs = require('fs')
const express = require('express')
const router = express.Router()
const validations = require('../helpers/validations')
const firebase = require('../helpers/firebase-rt-db');
const database = new firebase.FirebaseRtDB(
    "../private/secretroom-76218-firebase-adminsdk-credentials.json",
    "https://secretroom-76218-default-rtdb.europe-west1.firebasedatabase.app/"
)

/*
 * /api-rc -> validates:
 *     - client and room
 * 
 * /api-cr-ct -> validates:
 *     - client and room
 *     - client type
 * 
 * /api-cr-ck -> validates:
 *     - client and room
 *     - client and key
 */

// some required middlewares

router.use('/api-cr', (req, res, next) => {
    if (
        validations.validateClientAndRoom(req.body['clientid'], req.body['roomid'])
    ) next()
    else res.sendStatus(403)
})

router.use('/api-cr-ct', (req, res, next) => {
    if (
        validations.validateClientAndRoom(req.body['clientid'], req.body['roomid'])
        && validations.validateClientType(req.body['clientid'], req.body['roomid'], req.body['client_val_key'])
    ) next()
    else res.sendStatus(403)
})

router.use('/api-cr-ck', (req, res, next) => {
    if (
        validations.validateClientAndRoom(req.body['clientid'], req.body['roomid'])
        && validations.validateClientAndKey(req.body['clientid'], req.body['roomid'], req.body['client_val_key'])
    ) next()
    else {
        res.sendStatus(403)
    }
})

// api requests
router.post('/api-cr', (req, res) => {
    if (
        req.body["command"] === "read_chat"
    ) { // get text from chat area and pushing it into message file
        const CHAT_PATH = `./rooms/${req.body["roomid"]}/chat.json`
        let ChatData = JSON.parse(fs.readFileSync(CHAT_PATH))
        let Messages = []
        for (let i of Object.keys(ChatData)) {
            Messages.push([i, ChatData[i][0], ChatData[i][1], ChatData[i][2]])
        }
        res.send(Messages);
    } else if (
        req.body["command"] === "get_members"
    ) {
        const RoomInfo = JSON.parse(fs.readFileSync(`./rooms/${req.body["roomid"]}/info.json`))
        const members = Object.keys(RoomInfo['members'])
        let MembersData = {}
        for (const member of members) {
            if (member == RoomInfo['host']) {
                MembersData[member] = "Host"
            } else {
                MembersData[member] = "Joiner"
            }
        }
        res.json(MembersData)
    }
})

router.post('/api-cr-ct', (req, res) => {
    try {
        if (
            req.body["command"] == "check_requests"
        ) {
            let RequestsData = JSON.parse(fs.readFileSync(`./rooms/${req.body['roomid']}/requests.json`))
            let locRequest = null
            for (const request of Object.keys(RequestsData)) {
                if (RequestsData[request] == 0) {
                    locRequest = request
                    break
                }
            }
    
            if (locRequest != null) {
                res.json({ 'status': 'FOUND', 'request': locRequest })
            } else {
                res.json({ 'status': 'NOT_FOUND' })
            }
    
        } else if (
            req.body["command"] === "accept_request"
        ) {
            let RequestsData = JSON.parse(fs.readFileSync(`./rooms/${req.body['roomid']}/requests.json`))
            RequestsData[req.body['request']] = 1
            fs.writeFileSync(`./rooms/${req.body['roomid']}/requests.json`, JSON.stringify(RequestsData))
            res.sendStatus(200)
        } else if (
            req.body["command"] === "refuse_request"
        ) {
            let RequestsData = JSON.parse(fs.readFileSync(`./rooms/${req.body['roomid']}/requests.json`))
            RequestsData[req.body['request']] = -1
            fs.writeFileSync(`./rooms/${req.body['roomid']}/requests.json`, JSON.stringify(RequestsData))
            res.sendStatus(200)
        } else if (
            req.body['command'] === "delete_joiner"
        ) {
            const RoomInfo = JSON.parse(fs.readFileSync(`./rooms/${req.body["roomid"]}/info.json`))
            delete RoomInfo['members'][req.body['joinerid']]
            fs.writeFileSync(`./rooms/${req.body["roomid"]}/info.json`, JSON.stringify(RoomInfo))
            res.sendStatus(200)
        }
    } catch (error) {
        res.sendStatus(404)
    }
})

router.post('/api-cr-ck', (req, res) => {
    const CHAT_PATH = `./rooms/${req.body["roomid"]}/chat.json`
    let ChatData = JSON.parse(fs.readFileSync(CHAT_PATH))
    if (
        req.body["command"] === "write_message"
    ) {
        let MsgIndex = Object.keys(ChatData).length
        ChatData[MsgIndex] = [req.body['clientid'], req.body['message'], req.body['datetime']]
        fs.writeFileSync(CHAT_PATH, JSON.stringify(ChatData))
        res.sendStatus(200)
    } else if (
        req.body["command"] === "delete_message"
    ) {
        try {
            delete ChatData[req.body['message_id']]
            fs.writeFileSync(CHAT_PATH, JSON.stringify(ChatData))
            res.sendStatus(200)
        } catch (error) {
            res.sendStatus(404)
        }
    }
})

module.exports = router
